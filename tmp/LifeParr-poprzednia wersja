/*
 * LifeParallelImplementation.cpp
 *
 */
#include <mpi.h>
#include "LifeParallelImplementation.h"
//#include <stdlib.h>
//#include <iostream>

LifeParallelImplementation::LifeParallelImplementation()
{
}

void LifeParallelImplementation::splitArray(int p, int r)
    {
    
    // int procs = p;
    // int rank = r;
	
    // int rows_per_process = (size) / procs;   
    // start_row = rank * rows_per_process;
	// end_row = start_row + rows_per_process - 1;
	
    // // if ( r == procs - 1 ){              //gdy rozmiar tablicy nie pozwala na rowne podzielenie tablicy 
    // //     if (size%procs != 0 ){
    // //         end_row = size - 1;
    // //     }
    // // }

    // if (rank < size % procs) { // Rozdziel dodatkowe wiersze równomiernie
    //     start_row += rank;
    //     end_row += rank + 1;
    // } else {
    //     start_row += size % procs;
    //     end_row += size % procs;
    // }


    int procs = p;
    int rank = r;

    int rows_per_process = size / procs;
    int extra_rows = size % procs;

    // Własna implementacja funkcji min
    auto my_min = [](int a, int b) {
        return a < b ? a : b;
    };

    start_row = rank * rows_per_process + my_min(rank, extra_rows);
    end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0) - 1;

}

void LifeParallelImplementation::exchangeData(int p, int r)
{
   
  int procs = p;
    int rank = r;
    MPI_Request send_requests[4], recv_requests[4];
    int request_count = 0;

    // Asynchroniczne wysyłanie i odbieranie danych
    if (rank > 0) {
        MPI_Isend(&cells[start_row][0], size_1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, &send_requests[request_count++]);
        MPI_Isend(&pollution[start_row][0], size_1, MPI_INT, rank - 1, 1, MPI_COMM_WORLD, &send_requests[request_count++]);
        MPI_Irecv(&cells[start_row - 1][0], size_1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, &recv_requests[request_count - 2]);
        MPI_Irecv(&pollution[start_row - 1][0], size_1, MPI_INT, rank - 1, 1, MPI_COMM_WORLD, &recv_requests[request_count - 1]);
    }

    if (rank < procs - 1) {
        MPI_Isend(&cells[end_row][0], size_1, MPI_INT, rank + 1, 2, MPI_COMM_WORLD, &send_requests[request_count++]);
        MPI_Isend(&pollution[end_row][0], size_1, MPI_INT, rank + 1, 3, MPI_COMM_WORLD, &send_requests[request_count++]);
        MPI_Irecv(&cells[end_row + 1][0], size_1, MPI_INT, rank + 1, 2, MPI_COMM_WORLD, &recv_requests[request_count - 2]);
        MPI_Irecv(&pollution[end_row + 1][0], size_1, MPI_INT, rank + 1, 3, MPI_COMM_WORLD, &recv_requests[request_count - 1]);
    }

    // Czekanie na zakończenie wszystkich żądań wysyłania i odbierania
    MPI_Waitall(request_count, send_requests, MPI_STATUSES_IGNORE);
    MPI_Waitall(request_count, recv_requests, MPI_STATUSES_IGNORE);


    // MPI_Barrier(MPI_COMM_WORLD);

    // if ( rank > 0 ) {
    //     MPI_Send( &cells[start_row][0], size_1, MPI_INT, rank - 1, 1, MPI_COMM_WORLD );
    //     MPI_Send( &pollution[start_row][0], size_1, MPI_INT, rank - 1, 2, MPI_COMM_WORLD );
	// }



    // if ( rank < procs-1 ) {
    //     MPI_Send( &cells[end_row][0], size_1, MPI_INT, rank + 1, 3, MPI_COMM_WORLD );
    //     MPI_Send( &pollution[end_row][0], size_1, MPI_INT, rank + 1, 4, MPI_COMM_WORLD );
    // }



    // if ( rank < procs-1 ) {
    //     MPI_Recv( &cells[end_row + 1][0], size_1, MPI_INT, rank + 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
    //     MPI_Recv( &pollution[end_row + 1][0], size_1, MPI_INT, rank + 1, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
    // }



    // if ( rank > 0 ) {
    //     MPI_Recv( &cells[start_row - 1][0], size_1, MPI_INT, rank - 1, 3, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
    //     MPI_Recv( &pollution[start_row - 1][0], size_1, MPI_INT, rank - 1, 4, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
    // }

    //  MPI_Barrier(MPI_COMM_WORLD);
}


void LifeParallelImplementation::realStep()
{
    int currentState, currentPollution;
    int procs, rank;


	for (int row = 1; row < size_1; row++){
		for (int col = start_row; col < end_row; col++)
	// for (int row = start_row; row < end_row; row++){
	// 	for (int col = 1; col < size_1; col++)


        {
            currentState = cells[row][col];
            currentPollution = pollution[row][col];
            cellsNext[row][col] = rules->cellNextState(currentState, liveNeighbours(row, col),
                                                       currentPollution);
            pollutionNext[row][col] =
                rules->nextPollution(currentState, currentPollution, pollution[row + 1][col] + pollution[row - 1][col] + pollution[row][col - 1] + pollution[row][col + 1],
                                     pollution[row - 1][col - 1] + pollution[row - 1][col + 1] + pollution[row + 1][col - 1] + pollution[row + 1][col + 1]);
        }
    
	}
swapTables();
exchangeData(procs,rank);
   

}

void LifeParallelImplementation::oneStep()
{

    int procs, rank;

    MPI_Comm_size(MPI_COMM_WORLD, &procs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    splitArray(procs,rank);

    MPI_Barrier(MPI_COMM_WORLD);

    realStep();

    MPI_Barrier(MPI_COMM_WORLD); //
    


    
 
}

int LifeParallelImplementation::numberOfLivingCells() {

	return sumTable( cells );
}

double LifeParallelImplementation::averagePollution() {
	return (double)sumTable( pollution ) / size_1_squared / rules->getMaxPollution();
}

